import sys
import csv
import os

asmfilepath = '../dataset-asm-reaserch/train/'
asmopcode = 'asm_opcode.txt'

if len(sys.argv) > 1:
    asmfilepath = sys.argv[1]
else:
    print "use default folder..."

opcode_list = []
with open(asmopcode, 'rb') as content:
    for line in content.readlines():
        opcode = line.split(' - ')
        if '/' in opcode[0]:
            opcode_list.extend([opcode[0].split('/')[0], opcode[0].split('/')[1]])
        else:
            opcode_list.append(opcode[0])

#feature pick up preparation
feature_list = []
feature_list = [["md5"] + opcode_list]

opcode_list = ['\t\t' + op.lower() for op in opcode_list]


asmopcode = 'asm_opcode3.txt'

with open(asmopcode, 'rb') as content:
    for line in content.read().splitlines():
        opcode_list.append(line.lower())
        feature_list[0]+=[line]

totalfilenumber = len(os.listdir(asmfilepath))
currentunmber = 0
for asmfile in os.listdir(asmfilepath):
    currentunmber += 1
    print str(currentunmber)+'/'+str(totalfilenumber), asmfile
    # The following table provides a list of x86-Assembler mnemonics, that is not complete.
    # Most of them can be found, for others see at www.intel.com
    # http://www.mathemainzel.info/files/x86asmref.html
    # count add, sub, mov, xor, push, pop, cmp, jz, jnz, je, jne, ja,
    with open(asmfilepath+asmfile) as filecontent:
        content_feature = [0] * len(opcode_list)

        for line in filecontent:
            for idx, op in enumerate(opcode_list):
                if op in line.lower():
                    content_feature[idx] +=1
        feature_list += ([[asmfile.split('.asm')[0]] + content_feature])


output_train_asm = 'dataset/train_asm.csv'
with open(output_train_asm, 'wb') as output:
    writer = csv.writer( output, delimiter=",")
    for row in feature_list:
        writer.writerow(row)

