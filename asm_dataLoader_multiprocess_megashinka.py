import sys
import csv
import os
from multiprocessing import Pool
from multiprocessing import Process, Lock

asmfilepath = '../dataset-asm-reaserch/train/'
threadnumber = 100

opcode_list = []
feature_list = []

if len(sys.argv) > 2:
    asmfilepath = sys.argv[1]
    threadnumber = int(sys.argv[2])
    print "use "+ str(threadnumber) + " processes"
else:
    print "use default folder and thread number..."

def get_feature_attribute():
    global opcode_list
    global feature_list
    # opcode as feature
    #asmopcode = 'asm_opcode.txt'
    #with open(asmopcode, 'rb') as content:
    #    for line in content.readlines():
    #        opcode = line.split(' - ')
    #        if '/' in opcode[0]:
    #            opcode_list.extend([opcode[0].split('/')[0], opcode[0].split('/')[1]])
    #        else:
    #            opcode_list.append(opcode[0])
    
    #Mega Shinka opcode_list
    opcode_list = ["AAA","AAD","AAM","AAS","ADC","ADD","ADDPS","ADDSS","AND","ANDN","ANDNPS","ANDPS","ARPL","BEXTR","BLCFILL","BLCI","BLCIC","BLCMASK","BLCS","BLSFILL","BLSI","BLSIC","BLSMSK","BLSR","BOUND","BSF","BSR","BSWAP","BT","BTC","BTR","BTS","BZHI","CALL","CBW","CDQ","CDQE","CLC","CLD","CLFLUSH","CLGI","CLI","CloseHandle","CloseServiceHandle","CLTS","CMC","CMOVcc","CMP","CMPPS","CMPS","CMPSB","CMPSD","CMPSQ","CMPSS","CMPSW","CMPXCHG","CMPXCHG16B","CMPXCHG8B","COMISS","CopyFile","CPUID","CQO","CreateDirectory","CreateFile","CreateProcess","CreateRemoteThread","CreateService","CreateThread","CVTPI2PS","CVTPS2PI","CVTSI2SS","CVTSS2SI","CVTTPS2PI","CVTTSS2SI","CWD","CWDE","DAA","DAS","DEC","DeleteFile","DeleteService","DIV","DIVPS","DIVSS","EMMS","ENTER","ESC","ExitProcess","ExitThread","F2XM1","FABS","FADD","FADDP","FBLD","FBSTP","FCHS","FCLEX","FCMOVB","FCMOVBE","FCMOVE","FCMOVNB","FCMOVNBE","FCMOVNE","FCMOVNU","FCMOVU","FCOM","FCOMI","FCOMIP","FCOMP","FCOMPP","FCOS","FDECSTP","FDISI","FDIV","FDIVP","FDIVR","FDIVRP","FEMMS","FENI","FFREE","FFREEP","FIADD","FICOM","FICOMP","FIDIV","FIDIVR","FILD","FIMUL","FINCSTP","FINIT","FIST","FISTP","FISTTP","FISUB","FISUBR","FLD","FLD1","FLDCW","FLDENV","FLDENVD","FLDENVW","FLDL2E","FLDL2T","FLDLG2","FLDLN2","FLDPI","FLDZ","FMUL","FMULP","FNCLEX","FNDISI","FNENI","FNINIT","FNOP","FNSAVE","FNSAVEW","FNSTCW","FNSTENV","FNSTENVW","FNSTSW","FPATAN","FPREM","FPREM1","FPTAN","FRNDINT","FRSTOR","FRSTORD","FRSTORW","FSAVE","FSAVED","FSAVEW","FSCALE","FSETPM","FSIN","FSINCOS","FSQRT","FST","FSTCW","FSTENV","FSTENVD","FSTENVW","FSTP","FSTSW","FSUB","FSUBP","FSUBR","FSUBRP","FTST","FUCOM","FUCOMI","FUCOMIP","FUCOMP","FUCOMPP","FWAIT","FXAM","FXCH","FXRSTOR","FXSAVE","FXTRACT","FYL2X","FYL2XP1","GetFileAttributes","GetSystemDirectory","GetWindowsDirectory","HLT","IDIV","IMUL","IN","INC","INS","INSD","INT","INTO","INVD","INVLPG","INVLPGA","IRET","IRETD","IRETQ","IRETx","JA","JAE","JB","JBE","JC","Jcc","JCXZ","JE","JECXZ","JG","JGE","JL","JLE","JMP","JNA","JNAE","JNB","JNBE","JNC","JNE","JNG","JNGE","JNL","JNLE","JNO","JNP","JNS","JNZ","JO","JP","JPE","JPO","JRCXZ","JS","JZ","LAHF","LAR","LDMXCSR","LDS","LEA","LEAVE","LES","LFENCE","LFS","LGDT","LGS","LIDT","LLDT","LMSW","LOADALL","LOCK","LODS","LODSB","LODSD","LODSQ","LODSW","LOOP","LOOPD","LOOPE","LOOPNE","LOOPNZ","LOOPW","LOOPx","LOOPZ","LSL","LSS","LTR","LZCNT","MASKMOVDQU","MASKMOVQ","MAXPS","MAXSS","MFENCE","MINPS","MINSS","MONITOR","MOV","MOV(CRn)","MOVAPS","MOVD","MoveFile","MOVHLPS","MOVHPS","MOVLHPS","MOVLPS","MOVMSKPS","MOVNTDQ","MOVNTI","MOVNTPD","MOVNTPS","MOVNTQ","MOVQ","MOVS","MOVSB","MOVSD","MOVSS","MOVSW","MOVSX","MOVSXD","MOVUPS","MOVZX","MUL","MULPS","MULSS","MULX","MWAIT","NEG","NOP","NOT","OpenSCManager","OpenService","OR","ORPS","OUT","OUTS","OUTSD","PACKSSDW","PACKSSWB","PACKUSWB","PADDB","PADDD","PADDSB","paddsiw","PADDSW","PADDUSB","PADDUSW","PADDW","PAND","PANDN","PAUSE","paveb","PAVGB","PAVGUSB","PAVGW","PCMPEQB","PCMPEQD","PCMPEQW","PCMPGTB","PCMPGTD","PCMPGTW","PDEP","pdistib","PEXT","PEXTRW","PF2ID","PF2IW","PFACC","PFADD","PFCMPEQ","PFCMPGE","PFCMPGT","PFMAX","PFMIN","PFMUL","PFNACC","PFPNACC","PFRCP","PFRCPIT1","PFRCPIT2","PFRCPV","PFRSQIT1","PFRSQRT","PFRSQRTV","PFSUB","PFSUBR","PI2FD","PI2FW","PINSRW","pmachriw","PMADDWD","pmagw","PMAXSW","PMAXUB","PMINSW","PMINUB","PMOVMSKB","pmulhriw","pmulhrw","PMULHUW","PMULHW","PMULLW","pmvgezb","pmvlzb","pmvnzb","pmvzb","POP","POPA","POPAD","POPCNT","POPF","POPFD","POPFQ","POR","PREFETCH","PREFETCH0","PREFETCH1","PREFETCH2","PREFETCHNTA","PREFETCHW","PSADBW","PSHUFW","PSLLD","PSLLQ","PSLLW","PSRAD","PSRAW","PSRLD","PSRLQ","PSRLW","PSUBB","PSUBD","PSUBSB","psubsiw","PSUBSW","PSUBUSB","PSUBUSW","PSUBW","PSWAPD","PUNPCKHBW","PUNPCKHDQ","PUNPCKHWD","PUNPCKLBW","PUNPCKLDQ","PUNPCKLWD","PUSH","PUSHA","PUSHAD","PUSHF","PUSHFD","PUSHFQ","PXOR","RCL","RCPPS","RCPSS","RCR","RDMSR","RDPMC","RDTSC","RDTSCP","ReadFile","RegCloseKey","RegCreateKeyEx","RegDeleteKey","RegDeleteValue","RegEnumKeyEx","RegEnumValue","RegGetValue","RegisterServiceCtrlHandler","RegNotifyChangeKeyValue","RegOpenKeyEx","RegSetValueEx","REP","REPE","REPNE","REPNZ","REPxx","REPZ","RET","RETF","RETN","ROL","ROR","RORX","RSM","RSQRTPS","RSQRTSS","SAHF","SAL","SAR","SARX","SBB","SCAS","SCASB","SCASD","SCASQ","SCASW","SETAE","SETB","SETBE","SETC","SETcc","SETE","SetFileAttributes","SetFilePointer","SETG","SETGE","SETL","SETLE","SETNA","SETNAE","SETNB","SETNC","SETNE","SETNG","SETNGE","SETNL","SETNLE","SETNO","SETNP","SETNS","SETNZ","SETO","SETP","SETPE","SETPO","SETS","SETZ","SFENCE","SGDT","SHL","SHLD","SHLX","SHR","SHRD","SHRX","SHUFPS","SIDT","SKINIT","SLDT","SMSW","SQRTPS","SQRTSS","StartService","StartServiceCtrlDispatcher","STC","STD","STGI","STI","STMXCSR","STOS","STOSB","STOSD","STOSQ","STOSW","STR","SUB","SUBPS","SUBSS","SWAPGS","SYSCALL","SYSENTER","SYSEXIT","SYSRET","T1MSKC","TerminateProcess","TerminateThread","TEST","TZCNT","TZMSK","UCOMISS","UD2","UNPCKHPS","UNPCKLPS","VERR","VERW","VMCALL","VMCLEAR","VMLAUNCH","VMLOAD","VMMCALL","VMPTRLD","VMPTRST","VMREAD","VMRESUME","VMRUN","VMSAVE","VMWRITE","VMXOFF","VMXON","WAIT","WBINVD","WinExec","WriteFile","WRMSR","XADD","XCHG","XLAT","XLATB","XOR","XORPS"]

    #feature pick up preparation
    feature_list = [["md5"] + opcode_list]
    
    opcode_list = ['\t\t' + op.lower() for op in opcode_list]
    
    # feature from FC survey
    #asmopcode = 'asm_opcode3.txt'
    #
    #with open(asmopcode, 'rb') as content:
    #    for line in content.read().splitlines():
    #        opcode_list.append(line.lower())
    #        feature_list[0]+=[line]


def get_feature():
    global opcode_list
    global feature_list
    thread = 1000

    totalfilenumber = len(os.listdir(asmfilepath))
    currentunmber = 0
    for asmfile in os.listdir(asmfilepath):
        currentunmber += 1
        print str(currentunmber)+'/'+str(totalfilenumber), asmfile
        # The following table provides a list of x86-Assembler mnemonics, that is not complete.
        # Most of them can be found, for others see at www.intel.com
        # http://www.mathemainzel.info/files/x86asmref.html
        # count add, sub, mov, xor, push, pop, cmp, jz, jnz, je, jne, ja,
        with open(asmfilepath+asmfile) as filecontent:
            content_feature = [0] * len(opcode_list)
    
            for line in filecontent:
                for idx, op in enumerate(opcode_list):
                    if op in line.lower():
                        content_feature[idx] +=1
            feature_list += ([[asmfile.split('.asm')[0]] + content_feature])

def f(l, asmfile_sublist, index):
    #print asmfile_sublist
    global opcode_list
    feature_list = []
    global asmfilepath

    totalfilenumber = len(asmfile_sublist)
    currentunmber = 0
    for asmfile in asmfile_sublist:
        currentunmber += 1
        print 'P-'+ str(index+1)+ ': ' +str(currentunmber)+'/'+str(totalfilenumber), asmfile
        # The following table provides a list of x86-Assembler mnemonics, that is not complete.
        # Most of them can be found, for others see at www.intel.com
        # http://www.mathemainzel.info/files/x86asmref.html
        # count add, sub, mov, xor, push, pop, cmp, jz, jnz, je, jne, ja,
        with open(asmfilepath+asmfile) as filecontent:
            content_feature = [0] * len(opcode_list)
    
            for line in filecontent:
                for idx, op in enumerate(opcode_list):
                    if op in line.lower():
                        content_feature[idx] +=1
            l.acquire()
            #feature_list += ([[asmfile.split('.asm')[0]] + content_feature])
            generate_csv2([[asmfile.split('.asm')[0]] + content_feature])
            l.release()

def generate_csv():
    global feature_list
    output_train_asm = 'dataset/train_asm_mega.csv'
    with open(output_train_asm, 'wb') as output:
        writer = csv.writer( output, delimiter=",")
        for row in feature_list:
            writer.writerow(row)

def generate_csv2(feature):
    global feature_list
    output_train_asm = 'dataset/train_asm_mega.csv'
    with open(output_train_asm, 'a') as output:
        writer = csv.writer( output, delimiter=",")
        for row in feature:
            writer.writerow(row)

if __name__ == '__main__':
    lock = Lock()

    all_data = os.listdir(asmfilepath)
    data = []
    for item in all_data:
        if not item.startswith('.'):
            data.append(item)

    
    #threadnumber = 10
    if threadnumber > len(data):
        threadnumber = len(data)
    p = Pool(threadnumber)

    #print data
    elementnumber = len(data)/threadnumber
    chunks = [data[x:x+elementnumber] for x in range(0, len(data), elementnumber)]

    get_feature_attribute()
    # set csv title
    generate_csv()

    #get_feature()
    for idx, chunk in enumerate(chunks):
        p = Process(target=f, args=(lock, chunk, idx))
        p.start()
    p.join()
    print 'Finish'
    #generate_csv()